ror-e
spree

apparently we should probs use activemerchant / activeadmin


re looks more like a rails app (spree disputes)
re has accounting built in (spree disputes)
re has purchase orders built in
re has less front end built out (spree disputes)
re gives more insight into customer flow if they delete stuff (spree maybe disputes)
re follows MVC better (spree disputes)
re has better CRUD routes (spree disputes)
spree more widely used
spree cited frequently as awesome code
spree has more contributors
spree CEO seemed substantially smarter and cooler than re CEO
Spree is the framework that has the most built out feature set, but with that comes a lot of code bloat, performance issues
re was lightly based on Spree / experiences in working with Spree. It's more built out on the inventory side, but it's focus is to serve more as a solid starting point for developers rather than to solve every problem. I believe that Ror-e has addressed some performance issues experienced by Spree.
Piggybak is very new, very lightweight and meant to work with RailsAdmin. I'm biased because I wrote it :) It's also meant to serve as a starting point for developers that is mounted on top of an existing application.
Spree has the largest community and a number of extensions available
spree is using devise too (re may also)
Spree now has early stage venture capital funding and is building relationships with 3rd party services like analytics and payment gateways - with the goal in mind to be the one stop shop for all ecommerce needs. Ror-e is built with a perspective of being a solid base from which to build out a customizeable application. Spree also has deface , which is a tool aimed at allowing designer-friendly interactions with updating the UI.
Spree tries to be its own framework.  What this means is that spree overrides several things in rails itself.  I have not followed up with recent editions of spree but the first thing I noticed about Spree is that the app folder is in the vendor folder.  RoR-e tries to behave like a normal rails application. The app folder is right what it belongs.  RoR-e doesnâ€™t override Rails because I found that trying to understand where spree overrode rails caused for frustrating hours of development.




later:
	https://www.ruby-toolbox.com/projects/stripe
	there are spreadsheet / invoice generating apps for generating order reports
